func str.cat(args*) { return muf("args @ array_interpret"); }
func str.fmt(fmt, args*) { var out;  muf("0 try args @ array_explode pop fmt @ fmtstring out ! catch pop endcatch"); return out; }
func str.split(str, delim) { return muf("{ str @ delim @ split }list"); }


class string {
    var val = "";

    method _init(s) {
        self.val = s;
        return self;
    }

    method cat(args) {
        return new string(array_interpret(args));
    }

    method fmt(args) {
        return new string(fmtstring(self.val, args));
    }

    method cmp(s) {
        if (type(s) != "string")
            s = s.val;
        return strcmp(self.val, s.val);
    }

    method cmpi(s) {
        if (type(s) != "string")
            s = s.val;
        return strcmp(self.val, s.val);
    }

    method has_prefix(s) {
        if (type(s) != "string")
            s = s.val;
        return stringpfx(self.val, s);
    }

    method explode(delim) {
        if (type(delim) != "string")
            delim = delim.val;
        return explode_array(self.val, delim);
    }

    method cut(pos) {
        parts = strcut(self.val, pos);
        return [new string(parts[0]), new string(parts[1])];
    }

    method split(delim) {
        parts = split(self.val, delim);
        return [new string(parts[0]), new string(parts[1])];
    }

    method rsplit(delim) {
        parts = rsplit(self.val, delim);
        return [new string(parts[0]), new string(parts[1])];
    }

    method join(arr) {
        return new string(array_join(arr, self.val));
    }

    method is_int() {
        var v = self.val;
        return muf("v @ number?");
    }

    method int() {
        return atoi(self.val);
    }

    method float() {
        return stod(self.val);
    }

    method instr(s) {
        return instr(self.val, s);
    }

    method rinstr(s) {
        return rinstr(self.val, s);
    }
};


